// <auto-generated />
using System;
using HospitalAppTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HospitalAppTask.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200327160058_update-V1.1")]
    partial class updateV11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HospitalAppTask.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            Name = "الباطنة"
                        },
                        new
                        {
                            DepartmentId = 2,
                            Name = "العظام"
                        },
                        new
                        {
                            DepartmentId = 3,
                            Name = "العيون"
                        });
                });

            modelBuilder.Entity("HospitalAppTask.Models.Disease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CauseInfection")
                        .HasColumnType("bit");

                    b.Property<bool>("Chronic")
                        .HasColumnType("bit");

                    b.Property<string>("KindOfDisease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Legacy")
                        .HasColumnType("bit");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DiseaseId");

                    b.HasIndex("PatientId");

                    b.ToTable("Diseases");

                    b.HasData(
                        new
                        {
                            DiseaseId = 1,
                            CauseInfection = false,
                            Chronic = false,
                            KindOfDisease = "رمد ربيعي",
                            Legacy = false
                        },
                        new
                        {
                            DiseaseId = 2,
                            CauseInfection = false,
                            Chronic = false,
                            KindOfDisease = "كسر بالساق",
                            Legacy = false
                        });
                });

            modelBuilder.Entity("HospitalAppTask.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            IsActive = true,
                            Name = "محمد احمد",
                            Specialization = "عظام"
                        },
                        new
                        {
                            DoctorId = 2,
                            IsActive = true,
                            Name = "علي مصطفي",
                            Specialization = "عيون"
                        });
                });

            modelBuilder.Entity("HospitalAppTask.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("KindOfEmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("KindOfEmployeeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "f7593ccc-ba30-4a44-8056-09ef6e274d05",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae908057-63ef-4e16-8be6-cd4afa59f0b5",
                            Email = "a1@a1.a1",
                            EmailConfirmed = false,
                            EmployeeId = 100,
                            FullName = "محمد توفيق",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "12345@Mm",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dee513b6-001f-44bf-8f86-a16d0ecffe98",
                            TwoFactorEnabled = false,
                            UserName = "username1"
                        },
                        new
                        {
                            Id = "ae8d791e-35a6-4ca3-94c3-b5fb3ae058a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a110256c-bcfd-4c2f-823a-90178bc4a5a3",
                            Email = "a2@a2.a2",
                            EmailConfirmed = false,
                            EmployeeId = 200,
                            FullName = "محمد علي",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "12345@Mm",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02c1bc46-50f7-4caf-8791-0422f35366d1",
                            TwoFactorEnabled = false,
                            UserName = "username2"
                        },
                        new
                        {
                            Id = "7e0161a9-31fd-4bba-90d9-141f83ef1fcf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f28800a-a31d-46dd-863b-b3cb2ffdf949",
                            Email = "a3@a3.a3",
                            EmailConfirmed = false,
                            EmployeeId = 300,
                            FullName = " محمد حمد",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "12345@Mm",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15f9b1af-688d-40cd-b336-ea1e488ae096",
                            TwoFactorEnabled = false,
                            UserName = "username3"
                        },
                        new
                        {
                            Id = "0a26fc59-94a4-4173-af06-f7bb7a3a8fea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7689f5b8-f108-42f1-8704-12ee50bc9712",
                            Email = "a4@a4.a4",
                            EmailConfirmed = false,
                            EmployeeId = 400,
                            FullName = " محمد سمير",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "12345@Mm",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a0f641e-703b-4eff-a06d-15befd9d0c1d",
                            TwoFactorEnabled = false,
                            UserName = "username4"
                        },
                        new
                        {
                            Id = "7a9a2d7a-74f7-4d2b-90c6-1a16893be918",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3e57ceb-780e-4460-baaf-981c8cf26007",
                            Email = "a5@a5.a5",
                            EmailConfirmed = false,
                            EmployeeId = 500,
                            FullName = "محمد كريم ",
                            IsActive = true,
                            LockoutEnabled = false,
                            Password = "12345@Mm",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48d04a4a-3cdc-4f79-a66a-76fd29a85f2c",
                            TwoFactorEnabled = false,
                            UserName = "username5"
                        });
                });

            modelBuilder.Entity("HospitalAppTask.Models.EmployeeRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("HospitalAppTask.Models.KindOfEmployee", b =>
                {
                    b.Property<int>("KindOfEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KindOfEmployeeId");

                    b.ToTable("kindOfEmployees");

                    b.HasData(
                        new
                        {
                            KindOfEmployeeId = 100,
                            Kind = "أ"
                        },
                        new
                        {
                            KindOfEmployeeId = 200,
                            Kind = "ب"
                        },
                        new
                        {
                            KindOfEmployeeId = 300,
                            Kind = "ج"
                        },
                        new
                        {
                            KindOfEmployeeId = 400,
                            Kind = "د"
                        });
                });

            modelBuilder.Entity("HospitalAppTask.Models.KindOfPatient", b =>
                {
                    b.Property<int>("KindOfPatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KindOfEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("KindOfPatientId");

                    b.HasIndex("KindOfEmployeeId");

                    b.ToTable("KindOfPatients");

                    b.HasData(
                        new
                        {
                            KindOfPatientId = 1,
                            Id = 0,
                            IsActive = false,
                            Kind = "مجاني"
                        },
                        new
                        {
                            KindOfPatientId = 2,
                            Id = 0,
                            IsActive = false,
                            Kind = "علاج باجر"
                        },
                        new
                        {
                            KindOfPatientId = 3,
                            Id = 0,
                            IsActive = false,
                            Kind = "علاج على نفقة التامين"
                        },
                        new
                        {
                            KindOfPatientId = 4,
                            Id = 0,
                            IsActive = false,
                            Kind = "علاج على نفقة الدولة"
                        });
                });

            modelBuilder.Entity("HospitalAppTask.Models.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NationalityId");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            NationalityId = 1,
                            Country = "مصر",
                            Name = "مصري"
                        },
                        new
                        {
                            NationalityId = 2,
                            Country = "السعودية",
                            Name = "سعودي"
                        },
                        new
                        {
                            NationalityId = 3,
                            Country = " الامارات العربية المتحدة",
                            Name = "اماراتي"
                        },
                        new
                        {
                            NationalityId = 4,
                            Country = "قطر",
                            Name = "قطري"
                        },
                        new
                        {
                            NationalityId = 5,
                            Country = "فرنسا",
                            Name = "فرنسي"
                        },
                        new
                        {
                            NationalityId = 6,
                            Country = "الولايات المتحدة الامريكية",
                            Name = "امريكي"
                        });
                });

            modelBuilder.Entity("HospitalAppTask.Models.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnostic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("IdImgPath")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("KindOfPatientId")
                        .HasColumnType("int");

                    b.Property<string>("NameArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SickHistory")
                        .HasColumnType("bit");

                    b.HasKey("PatientId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("KindOfPatientId");

                    b.HasIndex("NationalityId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HospitalAppTask.Models.Disease", b =>
                {
                    b.HasOne("HospitalAppTask.Models.Patient", null)
                        .WithMany("Diseases")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("HospitalAppTask.Models.Doctor", b =>
                {
                    b.HasOne("HospitalAppTask.Models.Department", null)
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("HospitalAppTask.Models.Employee", b =>
                {
                    b.HasOne("HospitalAppTask.Models.KindOfEmployee", "KindOfEmployee")
                        .WithMany()
                        .HasForeignKey("KindOfEmployeeId");
                });

            modelBuilder.Entity("HospitalAppTask.Models.KindOfPatient", b =>
                {
                    b.HasOne("HospitalAppTask.Models.KindOfEmployee", "KindOfEmployee")
                        .WithMany("KindOfPatients")
                        .HasForeignKey("KindOfEmployeeId");
                });

            modelBuilder.Entity("HospitalAppTask.Models.Patient", b =>
                {
                    b.HasOne("HospitalAppTask.Models.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("HospitalAppTask.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId");

                    b.HasOne("HospitalAppTask.Models.Employee", "Employee")
                        .WithMany("Patients")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("HospitalAppTask.Models.KindOfPatient", "KindOfPatient")
                        .WithMany("Patients")
                        .HasForeignKey("KindOfPatientId");

                    b.HasOne("HospitalAppTask.Models.Nationality", "Nationality")
                        .WithMany("Patients")
                        .HasForeignKey("NationalityId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("HospitalAppTask.Models.EmployeeRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HospitalAppTask.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HospitalAppTask.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("HospitalAppTask.Models.EmployeeRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAppTask.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HospitalAppTask.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
